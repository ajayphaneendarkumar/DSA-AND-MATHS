linked list:-
===============
-->reverse a linked list
==========================
-->time complexity of reversing a linked  list is "o(N)".
 ListNode* Reverse(ListNode* head)
{
   ListNode* newHead=NULL;
   while(head!=NULL)
   {
     ListNode * next=head->next;
     head->next=newHead;
     newHead=head;
     head=next;
    }
     return newHead;
}
================================
-->remove nth node from back of linked list.
-->coomplexity is o(2n)
 ListNode* Remove(ListNode* head,int n)
{
   ListNode* newHead=new ListNode();
   newHead->next=head;
   ListNode* fast=newHead;
   ListNode* slow=newHead;
   for(int i=1;i<=n;i++)
    {
       fast=fast->next;
    }
    while(fast->next!=NULL)
    {
       slow=slow->next;
       fast=fast->next;
    }
    slow->next=slow->next->next;
    return newHead->next;
}
=====================================

->linked list -->print nodes,length,even node postions,odd nodes,palindrome check,middle node,binary to integer,remove head node,reverse,remove nth node from end.

===========================================================================================================================================================================
GRAPHS:-
=========================
-->graph is a combination of verxtex or nodes and edges.
-->G=v(E)
-->there are two types of graphs they are directed and undirected graph.
-->undirected graph:- the graph which has no directions is called as undirected graph and it can move from u -> v or v -> u.
-->degree of the undirected graph is nothing but no .of edges to each vertex.
-->toal degree = 2*no.of edges.
-->directed graph :-the graph which has directions is called as directed graph and it can move only in one direction u->v.
-->In directed graph there are indegree and outdeigree -->indegree is nothing but the edges which are coming in and outdegree is nothing but the edges which are going out from that vertex. 
-->how to read input in grpahs:-
==============================================================================================
#include<bits/stdc++.h>
using namespace std;
vector<int>adj[n+1];
int main()
{
  int n ,m;
  cin>>n>>m; //n -> nodes ,m -> edges
  for(int i=0;i<m;i++)
  {
      int u,v;
      cin>>u>>v;
      adj[u].push_back(v);
      adj[v].push_back(u);
  }
}
=============================================================================================
strings:-
==================
string functions are->
-->reverse(s.begin(),s.end()) or strrev(s)
-->strcpy(s1,s2) or s1.copy(s2)
-->strlen(s1)
-->s1.swap(s2)
-->tolowwer(s1)
-->toupper(s1)
-->to_string(s)
--->stoi(s1) -->stirng to integer conversion
-->getline(cin,str)
------------------------------------------------------------------
subarrays:-
===================================================================
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int a[] = {1,2,3,4,5};
    int n = 5;
    for(int i=0;i<n;i++)
    {
        for(int j=i;j<n;j++)
        {
          for(int k=i;k<=j;k++){
            cout << a[k] << " ";
          }
           cout << endl;
        }
       
    }
}
==================================================================================
to read the fast input and print them we have  the foolowing syntaxes:-
-->ios_base::sync_with_stdio(false);
-->cin.tie(NULL);
-->cout.tie(NULL);
=====================================================================================
PATTERNS:-
======================================================================================
PATTERNS WORKS ON NESTED LOOP NOTHING BUT LOOPING CONCEPT
-->1)FOR THE OUTER LOOP ,COUNT THE NUMBER OF LINES OR NUMBER OF ROWS
-->2)FOR THE INNER LOOP , FOCUS ON THE COLUMNS TO CONNECT THEM SOMEHOW TO ROWS.
-->3)PRINT THE PATTERN INSIDE THE INNER LOOP.
-->4)OBSERVE THE SYMMETRY(OPTIONAL).
===============================================================================================
STL :-
-->containers
-->algorithms
-->functions
-->iteratotrs
=======================
STL CONTAINERS:-
=======================
sequence containers:-implement a data structures which can be accessed in a sequential manner.
-->vectors,lists,arrays,dequeue
-->vectors:-
--->vector<int>v; //empty vector
--->vector<vector<int>>v;
-->pair<int,int>p;
--->v.push_back(ele);
--->v.pop_back(ele);
--->v.emplace_back(ele);
--->reverse(v.begin(),v.end()); //reversing the vector.
--->sort(v.begin(),v.end(),greater<int>()); //sorting purpose.
--->v.find(ele); //finding specific element in the vector.
--->v.erase(v.begin()+3); //erasing the element inthe given range.
--->v.insert(v.begin());
--->v1.swap(v2); //swaping two vectors.
--->reverse(v.rbegin() , v.rend());
--->sort(v.rbegin(),v.rend());
--->sort(arr,arr+n,greater<int>); //decreasing order sorting
---->for(auto it:v)
     {
       cout<<it<<" ";
     }
---->for(auto it=v.begin() ; it!=v.end();it++) 
     {
              cout<<it<<" ";
     }
--->is_sorted(arr,arr+n); //used to check whether the vector is sorted or not.
--->v.clear(); //clears the list
--->v.empty();  //return true if the list is empty else return false.
int y=*max_element(v.begin(),v.end());
int x=*min_element(v.begin(),v.end());
-->v.begin();
-->v.end();
-->for(auto it:v) 
   { 
       sum=sum+it.second;  //vector pair sum
    }
    return sum;
 union of two arrays:-
 --->vector<int>v;
 -->set_union(v1.begin(),v1.end(),
                v2.begin(),v2.end() , back_inserter(v));
		
		or
 -->set<int>s;
     for(int i=0;i<n;i++)
      {
         s.insert(a[i]);
       }
       for(int i=0;i<m;i++)
       {
         s.insert(b[i]);
	}
	return s.size();
====================================================================
-->for(auto it:v)
  {
    int cnt=count(s.begin(),s.end(),it);     //count the number times a character or element occurs.
   }
================================================================================================================================
-->to find the next_permutations --> "next_permutation(s.begin(),s.end());"-->keep it in while loopand print every time "S".
-->to find the previous permutations-->"prev_permutation(s.begin(),s.end());"-->keep it in while loopand print every time "S".	   
=================================================================================================================================
LIST:-
---------------------
syntax:-
list<int>l;
-->l.push_back(ele);
-->l.push_front(ele);
-->l.pop_front(ele);
-->for(auto it:l)
    {
      cout<<it<<" ";
     }
 --->for(auto it=l.begin();it!=l.end();it++)
      {
         cout<<it<<" ";   cout<<*(it)<<" ";
      }
--->l.emplace_back(ele);
--->l.emplace_front(ele);
---->l.pop_back(ele);
---->l.sort(); //sorting the lsit.
----->l.reverse(); //reverse the list
---->l.assign(a,a+n);
---->l.unique();
---->l.empty();
---->l.erase(ele);
=================================================================================================
Forward list:-
================
syntax:-
   forward_list<int>l;
   same operations like list.
------------------------------------------------------------------------------------------
DEQUE:-
=======================================================
SYNTAX:-
  -->deque<int>dq;
-----------------------
  -->dq.push_back(ele);
  -->dq.push_front(ele);
  -->dq.pop_front(ele);
  -->dq.pop_back(ele);
  -->dq.emplace_back(ele);
  -->dq.max_size();
  --->dq1.swap(dq2);
  -->dq.find(ele);
  -->dq.erase(ele);
  -->dq.empty();
  -->dq.front();
  -->dq.back();
=======================================================================================================================
ASSOCIATIVE CONTAINERS:-
------------------------------------
Associative containers implement sorted data structures that can be quickly searched (O(log n) complexity). 
SET:-
------------------------------------------------------------------
-->SYNTAX:-
     set<data_type>s;
-->s.insert(ele);  //inserts ele into set
 -->for(int i=0;i<n;i++)  //reading the set.
    {
        int k;
	cin>>k;
        s.insert(k);
     }
 -->for(int i=0;i<n;i++)  //inserting array elements in to set.
 {
    s.insert(arr[i);
    } 
-->s.empty(); //returns true if set is empty else false
-->set<int,greater<int>>s;
--->s.erase(ele);
--->s.count(ele);
--->s.lower_bound(ele);
--->s.upper_bound(ele);
==========================================================================================================
MAP:-(O(logn))
=========================
SYNTAX:-
  map<int,int>mp;
  map<data_type1,data_type2>mp; //empty map
  map<int,pair<int,int>>mp;
  map<pair<int,int>,int>mp;
  for(auto it:mp)
  {
     cout<<it<<" ";
  }
  mp.lower_bound(ele); //deals with lower and upper bounds of a map
  mp.upper_bound(ele);
  mp.insert(piar<int,int>(ele1,ele2));
  -->m[key]=value; //adds value to the key.
==============================================================================================================
  MULTISET:-
  ===================
  SYNTAX:-
  mutliset<int>ms; //empty multiset
 --> ms.insert(ele); //inserts ele into multiset
 -->ms.empty();
 -->ms.count(ele); //counts the number of times the element occurs in multiset.
 -->ms.find(ele);
 -->ms.erase(ms.find(ele),ms.find(ele)+3);
 -->mutli set can store duplicate elements
 ================================================================================================  
ADAPTOR CONTAINERS:-
=====================================
-->STACK,QUEUE,PRIORITY QUEUE
STACK:-(lifo ->last in first out)(time complexity:O(1))
========================================================
-->Stacks are a type of container adaptors with LIFO(Last In First Out) type of working, where a new element is added at one end (top) and an element is removed from that end only  
-->it is having a potinter called top.
-->SYANTAX:-
    stack<int>st; //empty stack.
BASIC OPERATIONS:-
=================
-->st.push(ele) //adding element at the top of the stack;
-->st.pop();  //removing most recently added element.
-->st.empty(); //returns wether the stack is empty or not.
-->st.size() //returns size of the stack.
-->top() // Returns a reference to the top most element of the stack – Time Complexity : O(1)
-->st.swap(st1); //swapping of two stacks.
implementation:
    #include<bits/stdc++.h>
    using namespace std;
    int main()
    {
      stack<data_type>st;
      st.push(1);
      st.push(2);
      st.push(3);
      st.push(4);
      st.pop();
      st.pop();
      while(!st.empty())
      {
         cout<<st.top()<<" ";
	 st.pop();
       }
      }
=======================================================================================
QUEUE:-(FIFO-FIRST IN FIRST OUT)-->linear data structure
==========================================================
-->queue is one of the adaptor container that follows first in first out rule.every time new elements are added at back and removed from front.
-->syntax:-
      queue<int>q;
BASIC OPERATIONS:-
===========================
-->q.push(ele); //adds element at the back.
-->q.pop();     //removes the element from fornt.
-->q.front();   //returns the  first element of the queue.
-->q.back();    //retuns the last element of the queue.
-->q.size();    //returns the size.
-->q.empty();
------------------------------------------------------------------
IMPLEMENTATION:-
=============================================
#include<bits/stdc++.h>
using namespace std;
int main()
{
    queue<int>q;
    q.push(1);
    q.push(2);
    q.push(3);
    q.pop();
    while(!q.empty())
    {
      cout<<q.front()<<" ";
      q.pop();
      }
   }
===========================================================================================================
PRIORITY_QUEUE:-
=============================
A C++ priority queue is a type of container adapter, specifically designed such that the first element of the queue is either the greatest or the smallest of all elements in the queue.
SYNTAX:-
===========
priority_queue<data_type>pq; //max heap
priority_queue<data_type, vector<int>, greater<int>>pq; //to access the min heap data structures.-->minimum heap.
BASIC OPERATIONS:-
========================
-->pq.push(ele);  //adds element at the back of priority queue.
-->pq.pop();      //removes or deletes element at the front.
-->pq.top();    //returns topmost element of the queue.
-->pq.size();   //returns the size of queue
-->pq.empty();
-->pq.emplace(ele); //insert new element in to the queue.
-----------------------------------------------------------------------------
implementation:-
--------------------
#include<bits/stdc++.h>
using namespace std;
int main()
{
   priority_queue<int>pq;
   pq.push(10);
   pq.push(20);
   pq.push(30);
   pq.pop();
   while(!pq.empty())
   {
      cout<<pq.top()<<" ";
      pq.pop();
   }
}
=================================================================================================
PAIR:-
================
-->"< >" is called as utility header.
-->pair is used to combine two values together that may be of two data types.
--->first element is always called as first.
--->second element is always called as second and the order is same (first,second).
--->SYNTAX:-
  =======================
   --> pair<data_type1,data_type2>pair_name;
   -->pair<int , pair<int,int>>p;
   -->pair<int,int>arr[];  //array pair
  -->make_pair() member functions
    ===============================
    --> pair_name=make_pair(value1,value2);
   --------------------------------------------------------
--->swapping:-
      pair1.swap(pair2);
--->cout<<pair_name.first<<" " <<pair_name.second;    
--->cout<<p.first<<p.second.first<<p.second.second;
=========================================================================================================
BIT MANIPULATION:-
=======================================
Bit Wise operators are:-
   ->bitwise AND(&)
   ->bitwise XOR(^)
   ->bitwise OR(|)
   ->bitwise NOT(!)
Operators Operations	Result
XOR	X ^ 0s	X
XOR	X ^ 1s	~X
XOR	X ^ X	0
AND	X & 0s	0
AND	X & 1s	X
AND	X & X	X
OR	X | 0s	X
OR	X | 1s	1s
OR	X | X	X
---------------------------
--->GET BIT:-
     This method is used to find the bit at a particular position(say i) of the given number N. The idea is to find the Bitwise AND of the given number and 2i that can be represented as (1 << i). If the value return is 1 then the bit at the ith position is set. Otherwise, it is unset.

  IMPLEMENTATION:-
    ------------------
       bool getbit(int n,int i)
       {
         return (n&(1<<i)!=0);
	}
=======================================================================================
SET BIT:-
============
This method is used to set the bit at a particular position(say i) of the given number N. The idea is to update the value of the given number N to the Bitwise OR of the given number N and 2i that can be represented as (1 << i). If the value return is 1 then the bit at the ith position is set. Otherwise, it is unset.
IMPLEMENTATION:-
==================
bool setbit(int n ,int i)
{
   return (n | (1<<i) );
}
-->"_builtin_popcount()" -->returns the number of set bits. -->" _builtin_popcountll()".
=============================================================================================
clear bit:-(unset)
===============================
bool unset(int n ,int i)
{
  return (n & ~(1<<i));
 }
 -------------------------------
 to print binary  numbers --> for(int i=n;i>=0;i--)
                              {
			         cout<<((n>>i)&1)<<" ";
		               }
===================================================================================
-->TIME COMPLEXITY SERIES:-
       1<logn<sqrt(n)<n<nlogn<n**2<n**3<...<2^n<3^n < .. <n^n.
 =================================================================================
  RECURSION:-
  ===================
  -->when a function calls itself until a specified condition is met.
  -->recursion we can perform based on permutations and combinations.
  -->("next_permutation(v.begin(),v.end())" , "prev_permutation(v.begin(),v.end())")-->while loop for next_permutations.
  -->basic sudo code:-
       #include<bits/stdc++.h>
       using namespace std;
       void func()<----|
       {               |
         cout<<1;      |
	 func();       |
	}              |
	int main()     |
	{              |
	  func(); -----|
	}
 --->recursion tree:-
  ==========================
    f()
    /\
   f()f()
   /
   f()
   /
   f()
   /
   f()
   =============================================
   Factorial of  a number by using recursion:-
   #include<bits/stdc++.h>
   using namespace std;
   int fact(int n)
   {
      if(n==0)return 1; or if(n<=1)return 1;
      return n*fact(n-1);
    }
   int main()
   {
     int n;
     cin>>n;
     cout<<fact(n);
   }
===================================================
 --> #include<bits/stdc++.h> //palindrome checking
    using namespace std;
    bool palindrome(int i,string &s)
    {
       if(i>=s.size()/2)return true;
       if(s[i]!=s[s.size()-i-1])return false;
       palindrome(i+1,s);
    }
    int main()
    {
       string s="madam";
       cout<<palindrome(0,s);
      }
=================================================================================
-->subsequences using recursion:-
================================
#include<bits/stdc++.h>
using namespace std;
int func(int ind,int s,vector<int>&ds,int sum,int arr[],int n)
{
   if(ind==n)//base case.                                           if(ind==n)
   {                                                                {
     if(s==sum)                                                         if(s==sum)    
       for(auto it:ds)                                                   {
       {
         cout<<it<<" ";                                                     return 1;
       }                                                                  }
       return ;                                                           return 0;                                               
    }                                                                }
    ds.push_back(arr[ind]);  //pick  call                             ds.push_back(arr[ind]); 
    s+=arr[i];                                                        s+=arr[i];
    func(ind+1,s,ds,sum,arr,n);                                       int l=func(ind+1,s,ds,sum,arr,n);                           
    s-=arr[i];                                                        s-=arr[i];
    ds.pop_back();                                                    ds.pop_back();                                                  
    //non-pick call
    func(ind+1,s,ds,sum,arr,n);                                      int r=func(ind+1,s,ds,sum,arr,n);
                                                                     return l+r;
  }
int main()
{
   int n;
   cin>>n;
   int arr[n];
   for(int i=0;i<n;i++)
   {
     cin>>arr[i];
   }
   int sum=2;
   vector<int>ans;
   func(0,0,ds,sum,arr,n);
   return ds;
 }
 -->2^n -->subsets we will for the given array of size "n".
 =======================================================================================  
  to print subsets:-
  class Solution {
public:
void func(int index,vector<int>&v,vector<vector<int>>&ans,vector<int>&nums)
{

    ans.push_back(v);
    for(int i=index;i<nums.size();i++)
    {
        v.push_back(nums[i]);
        func(i+1,v,ans,nums);  //pick call
        v.pop_back();
    }
    return ;
}
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>v;
        int index=0;
        func(index,v,ans,nums);
        return ans;
    }
};
======================================================================
PREFIX-SUM:-
=============================
int prefix[n];
prefix[0]=a[0];
for(int i=0;i<n;i++)
{
   prefix[i]=a[i]+prefix[i-1];   //to read prefix array.
 }
 sum=prefix[r]-prefix[l-1];
 if l==0 sum=prefix[r];
 ---------------------------------------------------
  LINKED LIST:-
  ===================
  -->A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations.
  -->A linked list is a linear data structure in which the elements are stored with the help of nodes.
  -->each node stores data and address field of the next node.
  -->The nodes are linked using pointers.
  -->here the pointer is next.
  -->Advantages of Linked Lists over arrays:
               Dynamic Array.
               Ease of Insertion/Deletion.
               Insertion at the beginning is a constant time operation and takes O(1) time, as compared to arrays where inserting an element at the beginning takes                    O(n) time,where n is the number of elements in the array.
  -->STRUCTURE OF LINKED LIST:-
  ===================================
  struct Node{
     int data;
     Node* next;
     Node(int val)
     {
        data=val;
	next=NULL;
     }
   };
========================================================================	
  -->BASIC OPERATIONS OF LINKED LIST:-
    ==================================================
    ->DELETION:-
      ==========
        --->delete from begin:-
	        listnode* temp=head;
		head=head->next;
	-->delete from end:-
	     listnode* end=head;
	     listnode* prev=NULL;
	     while(end->next)
	     {
	        prev=end;
		end=end->next;
	     }
	     prev->next=NULL;
      ===============================================
     -->INSERTION:-
     =========================
      -->INSERT FORM BEGIN:-
           make a new node and assign new_node->next to the head and head to new_node.
=========================================================================================

// A simple C program for
// traversal of a linked list
  
#include <stdio.h>
#include <stdlib.h>
  
struct Node {
    int data;
    struct Node* next;
};
  
// This function prints contents of linked list starting
// from the given node
void printList(struct Node* n)
{
    while (n != NULL) {
        printf(" %d ", n->data);
        n = n->next;
    }
}
  
// Driver's code
int main()
{
    struct Node* head = NULL;
    struct Node* second = NULL;
    struct Node* third = NULL;
  
    // allocate 3 nodes in the heap
    head = (struct Node*)malloc(sizeof(struct Node));
    second = (struct Node*)malloc(sizeof(struct Node));
    third = (struct Node*)malloc(sizeof(struct Node));
  
    head->data = 1; // assign data in first node
    head->next = second; // Link first node with second
  
    second->data = 2; // assign data to second node
    second->next = third;
  
    third->data = 3; // assign data to third node
    third->next = NULL;
  
    // Function call
    printList(head);
  
    return 0;
}
====================================================================
 TIME COMPLEXITY:-
 =====================
 -->the amount of time required by an algorithm to solve the given problem is called time complexity.time complexity is a useful measure for the algorithm analysis.
 SPACE COMPLEXITY:-
 ===================
 -->the amount of space required by an algorithm to solve the given problem is called space complexity.
 ==========================================================================================================================
 Syntax for creating new node:-
     ListNode* newHead=new ListNode();
-->The last node of the linked list points to null.		  
-->the entry point of the linked list is head.
====================================================
APPLICATIONS:-
===================
-->Linke lists are used to implement stacks and queues.
-->linked lists are also used to represent trees and graphs.
-->it is used in dynamic memory allocation.
-->in music player previous songs and next songs are linked each other.
===============================================================================

